generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model binshops_categories {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  created_by Int?      @db.UnsignedInt
  parent_id  Int?
  lft        Int?
  rgt        Int?
  depth      Int?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([created_by], map: "binshops_categories_created_by_index")
}

model binshops_category_translations {
  id                   Int       @id @default(autoincrement()) @db.UnsignedInt
  category_id          Int?      @db.UnsignedInt
  category_name        String?
  slug                 String    @unique(map: "binshops_category_translations_slug_unique")
  category_description String?   @db.MediumText
  lang_id              Int       @db.UnsignedInt
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)

  @@index([lang_id], map: "binshops_category_translations_lang_id_index")
}

model binshops_comments {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  post_id        Int       @db.UnsignedInt
  user_id        Int?      @db.UnsignedInt
  ip             String?
  author_name    String?
  comment        String    @db.Text
  approved       Boolean   @default(true)
  author_email   String?
  author_website String?
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([post_id], map: "binshops_comments_post_id_index")
  @@index([user_id], map: "binshops_comments_user_id_index")
}

model binshops_configurations {
  key        String    @id
  value      String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model binshops_languages {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String    @unique(map: "binshops_languages_name_unique")
  locale      String    @unique(map: "binshops_languages_locale_unique")
  iso_code    String    @unique(map: "binshops_languages_iso_code_unique")
  date_format String
  active      Boolean   @default(true)
  rtl         Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model binshops_post_categories {
  id          Int @id @default(autoincrement()) @db.UnsignedInt
  post_id     Int @db.UnsignedInt
  category_id Int @db.UnsignedInt

  @@index([category_id], map: "binshops_post_categories_category_id_index")
  @@index([post_id], map: "binshops_post_categories_post_id_index")
}

model binshops_post_translations {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  post_id           Int?      @db.UnsignedInt
  slug              String
  title             String?   @default("New blog post")
  subtitle          String?   @default("")
  meta_desc         String?   @db.Text
  seo_title         String?
  post_body         String?   @db.MediumText
  short_description String?   @db.Text
  use_view_file     String?
  image_large       String?
  image_medium      String?
  image_thumbnail   String?
  lang_id           Int       @db.UnsignedInt
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  capa              String?

  @@index([lang_id], map: "binshops_post_translations_lang_id_index")
}

model binshops_posts {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int?      @db.UnsignedInt
  posted_at    DateTime? @db.DateTime(0)
  is_published Boolean   @default(true)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)

  @@index([posted_at], map: "binshops_posts_posted_at_index")
  @@index([user_id], map: "binshops_posts_user_id_index")
}

model binshops_uploaded_photos {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  uploaded_images String?   @db.Text
  image_title     String?
  source          String    @default("unknown")
  uploader_id     Int?      @db.UnsignedInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([uploader_id], map: "binshops_uploaded_photos_uploader_id_index")
}

model blog_posts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String
  slug       String
  subtitle   String
  featured   Boolean   @default(false)
  category   String?
  text       String    @db.Text
  image      String    @default("/storage/blog-default.png")
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model connectors {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email        String
  password     String
  access_token String?   @db.LongText
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model contacts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  email      String
  message    String
  phone      String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model pages {
  id         Int    @id @default(autoincrement())
  name       String
  content    String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model password_resets {
  email      String    @id
  token      String
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model price_page_relations {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  price      Float
  page       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String
  email             String    @unique(map: "users_email_unique")
  email_verified_at DateTime? @db.Timestamp(0)
  password          String
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}
